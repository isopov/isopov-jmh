package com.sopovs.moradanen.jmh;

import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

import com.sopovs.moradanen.jmh.Teads.Node;

//Benchmark                                    Mode  Samples    Score  Score error  Units
//c.s.m.j.ThrowNullBenchmark.baseline          avgt        3    0.265        0.006  ns/op
//c.s.m.j.ThrowNullBenchmark.realNPE           avgt        3    2.445        0.180  ns/op
//c.s.m.j.ThrowNullBenchmark.requireNotNull    avgt        3  916.473      246.440  ns/op
//c.s.m.j.ThrowNullBenchmark.throwNewNPE       avgt        3  884.765      137.583  ns/op
//c.s.m.j.ThrowNullBenchmark.throwNull         avgt        3    2.368        0.126  ns/op
public class TeadsBenchmark {

    static final String ONE = "4#0 1#1 2#2 3#2 4";
    static final String FOUR = "191#171 26#187 151#118 176#53 52#129 33#34 86#13 1#"
            + "186 46#30 62#78 25#177 146#96 101#155 71#126 69#152 127#"
            + "154 64#13 190#134 4#70 41#106 180#144 17#105 37#181 163#"
            + "65 89#101 34#187 90#16 177#34 106#152 59#117 189#85 2#62 9#"
            + "12 93#163 102#158 191#70 98#30 36#36 167#154 67#4 50#121 39#"
            + "125 111#18 178#117 169#96 42#47 38#62 28#123 94#123 153#"
            + "132 105#39 115#116 154#44 54#36 100#96 7#15 120#33 0#132 158#"
            + "181 184#84 181#25 63#62 83#109 125#138 107#55 73#116 13#"
            + "23 137#147 103#183 23#72 132#75 57#182 79#40 14#116 138#"
            + "109 77#55 56#156 40#42 183#18 160#70 157#71 113#121 70#"
            + "136 142#57 92#77 60#125 108#33 122#158 170#84 129#155 136#"
            + "159 84#12 179#165 91#136 3#177 130#183 15#66 150#47 27#"
            + "15 8#7 134#181 126#129 117#7 116#118 12#182 35#158 139#"
            + "63 124#72 156#4 145#84 30#39 140#48 123#47 162#176 45#53 61#"
            + "187 58#109 188#36 21#48 152#30 20#159 72#85 149#65 31#"
            + "5 55#156 85#177 175#20 161#188 148#57 19#77 110#40 74#"
            + "118 187#163 112#101 16#176 166#152 164#7 121#43 48#63 109#"
            + "106 11#125 22#188 143#34 18#188 114#23 10#75 186#184 32#"
            + "171 51#165 172#16 171#124 147#43 75#66 135#5 53#126 185#"
            + "25 43#176 141#71 24#66 68#105 173#42 155#129 47#15 131#"
            + "124 44#85 97#71 29#138 49#78 159#121 182#126 80#75 144#"
            + "147 88#134 165#144 87#186 6#42 5#86 133#72 118#44 95#"
            + "16 66#184 128#40 174#184 119#156 65#12 81#136 82#144 76#"
            + "186 168#86 99#78 96#20 104";
    static final String SIX = "1267#588 952#1120 494#457 844#835 942#638 1056#520 110#316 207#1184 753#669 339#1110 1231#"
            + "22 375#844 657#40 316#1037 44#856 93#792 808#1265 861#181 1016#365 745#1162 238#613 459#1209 462#"
            + "761 370#167 59#92 443#118 242#686 1077#836 499#84 840#840 675#109 393#768 109#1009 1224#661 303#"
            + "1207 1122#717 478#871 455#846 876#1260 991#1149 909#671 723#593 643#979 1116#1106 773#883 446#"
            + "554 511#549 498#450 828#266 47#111 1008#85 1130#350 737#896 976#17 1108#853 997#501 285#1126 1074#"
            + "516 577#582 609#1123 1091#576 296#157 47#889 993#1067 734#412 356#773 158#863 339#1254 814#704 981#"
            + "981 310#968 338#150 756#678 457#916 625#1071 472#1108 588#383 1099#829 766#962 467#922 442#1175 731#"
            + "661 1027#1168 843#932 105#331 798#466 1216#316 135#557 1218#1181 1158#189 434#302 893#656 173#"
            + "842 779#23 249#430 328#1002 1056#377 756#547 1030#708 401#1252 250#269 586#1013 234#312 755#129 296#"
            + "1169 647#810 993#865 17#963 279#769 31#1026 116#110 422#1193 60#1166 584#1119 890#843 1172#32 1157#"
            + "170 1013#66 974#813 954#113 111#440 991#1085 621#432 137#220 130#265 81#21 308#1138 514#648 1114#"
            + "1248 350#342 496#239 1230#123 1126#302 1007#435 83#1231 1128#640 816#199 971#320 261#578 726#478 451#"
            + "106 255#163 42#78 1164#507 662#706 362#178 318#288 1110#1224 74#478 1035#1151 1192#263 546#101 150#"
            + "490 652#928 984#120 658#60 297#602 224#1078 1100#239 1097#827 731#229 16#630 475#108 115#900 771#"
            + "954 871#351 1094#653 890#1138 43#1004 788#1175 1042#636 1079#542 663#8 485#1143 1206#617 616#210 405#"
            + "673 380#899 88#834 680#51 647#579 461#1177 182#26 268#718 1191#702 1004#707 899#512 1049#139 68#"
            + "466 549#19 632#525 352#27 773#1080 300#742 124#1158 538#1227 153#461 61#255 1247#614 1137#1197 593#"
            + "664 54#792 104#915 610#652 321#481 1095#1202 189#639 986#93 1095#403 872#715 807#247 1235#621 821#"
            + "695 1136#1249 962#1231 56#315 995#1120 1112#379 662#1162 246#487 381#366 742#905 192#59 96#867 175#"
            + "586 503#1120 337#840 897#1122 1204#962 29#1246 1006#113 1002#805 48#381 465#1169 556#150 128#"
            + "1229 866#334 1027#141 886#728 973#470 629#866 1227#173 1225#1211 201#1104 944#1084 1189#1214 396#"
            + "80 1046#1203 489#527 260#35 211#927 402#1131 205#611 1162#1005 826#147 1157#1237 1079#624 492#"
            + "749 31#515 388#1013 360#111 685#654 661#628 44#922 948#85 237#551 700#293 1229#626 798#204 598#"
            + "904 895#779 937#553 145#630 921#413 90#203 317#58 218#763 167#502 1132#556 1178#138 996#890 189#"
            + "521 1013#523 778#748 860#648 219#230 228#1180 284#468 493#339 565#800 737#747 1067#11 269#221 1105#"
            + "188 514#317 526#303 845#502 494#247 928#1052 1113#759 708#1067 1017#1057 756#395 1200#630 882#"
            + "568 732#864 713#272 1095#587 1252#510 316#229 560#76 644#362 770#735 664#1016 273#501 297#1121 615#"
            + "1177 479#598 652#197 772#569 833#970 870#23 1101#482 58#658 472#891 441#800 168#860 866#803 857#"
            + "1128 841#1143 1087#1226 731#133 622#585 225#662 910#1190 471#255 1139#897 1124#375 606#232 438#"
            + "800 724#1224 777#609 1256#241 1240#463 276#332 343#950 608#462 382#793 190#526 757#853 984#418 441#"
            + "785 301#743 1103#66 1059#78 786#74 421#52 844#625 1171#728 1004#597 932#7 801#801 340#562 1175#"
            + "1255 60#166 1204#815 1141#262 824#1077 854#19 1197#540 378#51 186#1129 40#204 822#54 1195#965 753#"
            + "425 251#25 582#216 1160#903 1027#488 984#1076 930#222 1183#235 472#603 968#626 1102#1059 647#"
            + "983 346#1064 1177#112 1253#532 460#90 1055#1067 612#751 381#263 1029#530 256#918 651#2 869#333 1137#"
            + "1002 1247#496 213#759 434#313 1012#559 111#949 888#745 494#145 619#563 516#647 1004#19 1199#1240 782#"
            + "859 1124#220 1179#530 1135#1023 962#876 552#156 202#1019 539#1265 980#1151 832#1006 805#954 428#"
            + "488 1156#908 17#990 1128#1262 971#720 527#667 944#574 270#1204 455#4 678#152 1118#972 174#397 1052#"
            + "819 919#33 474#918 95#651 767#1054 556#1079 1010#108 235#299 137#324 471#762 364#47 709#1019 994#"
            + "1222 833#474 1260#1168 968#1147 319#97 96#1105 218#1237 700#879 394#828 709#957 629#1115 803#172 197#"
            + "57 598#1188 453#368 905#1192 1202#94 194#549 1052#96 1111#139 1015#1260 434#154 1080#243 765#283 386#"
            + "964 1261#385 878#311 288#347 355#536 557#889 411#179 620#666 136#1115 404#146 787#677 425#946 209#"
            + "762 248#452 492#1096 696#1076 1236#932 29#1129 73#363 721#203 468#434 465#236 666#1256 895#183 860#"
            + "682 8#1186 575#454 145#512 1182#1056 928#34 243#1214 759#1133 986#596 453#638 1119#715 955#289 1063#"
            + "970 264#745 656#1228 52#895 349#736 471#13 1096#980 1124#876 744#1116 1017#888 757#814 438#1146 838#"
            + "1043 85#721 155#609 625#942 1047#1056 1259#81 235#799 633#964 133#199 58#232 898#339 465#1019 719#"
            + "1050 855#567 778#549 662#1012 417#103 725#1170 746#1265 809#1085 21#358 280#699 713#86 198#1058 966#"
            + "78 544#320 922#114 625#911 384#1140 194#840 849#1158 191#363 1259#451 78#269 797#166 149#868 439#"
            + "146 741#753 1073#912 556#1162 93#692 358#262 820#518 8#1253 650#1058 935#983 1146#119 880#1152 1089#"
            + "867 40#524 1148#1245 1071#186 435#1034 663#375 291#1235 795#441 913#26 137#355 1069#1096 412#498 1085#"
            + "1240 651#921 944#1166 609#681 446#1186 77#415 876#305 404#1198 329#780 1058#1118 482#86 892#514 416#"
            + "599 171#582 69#600 493#899 591#39 1157#169 1160#841 1119#319 49#3 700#799 117#1072 419#413 27#"
            + "875 1220#39 815#1224 369#699 1115#356 660#8 655#42 735#287 220#602 844#292 80#232 119#847 478#"
            + "127 395#654 921#1145 588#877 991#433 878#713 1121#599 987#827 124#961 767#1157 581#812 419#928 639#"
            + "429 1092#279 1082#36 242#44 99#364 228#1244 1226#1063 326#1103 46#325 502#800 688#621 486#770 532#"
            + "934 301#244 1149#1022 1127#1066 986#387 829#80 324#850 629#71 411#519 504#900 1068#618 240#1005 442#"
            + "932 431#41 898#756 505#9 59#1102 87#262 275#268 604#384 1205#1198 1239#1247 1058#501 51#964 778#"
            + "208 602#1160 683#248 684#787 638#990 10#689 725#226 128#947 420#1102 184#733 80#796 190#420 637#"
            + "455 1051#66 290#1146 1159#324 504#1059 161#62 972#811 708#499 1221#711 443#37 424#501 645#767 548#"
            + "859 856#108 1167#1250 373#938 62#29 1134#623 517#133 1238#416 820#999 159#971 534#814 442#582 513#"
            + "900 732#1088 1077#527 665#436 166#1258 1195#610 1218#1109 1253#570 142#500 30#634 842#359 905#"
            + "715 310#564 488#130 179#705 547#6 1116#946 206#658 101#294 1166#1211 1174#185 773#543 461#1077 56#"
            + "1254 1062#887 1078#790 230#243 1051#739 1138#107 388#702 1266#1025 1102#222 740#110 285#178 506#"
            + "203 152#116 14#653 430#1040 742#720 988#902 904#306 1138#641 728#1060 1185#302 1243#468 455#585 690#"
            + "725 285#906 988#315 282#812 210#762 116#303 1048#1252 1237#1235 314#1169 270#89 644#375 1232#267 23#"
            + "388 897#943 448#673 1194#1223 721#506 1123#1022 237#112 53#15 1131#931 889#361 220#589 138#495 152#"
            + "167 271#980 608#390 388#917 488#177 855#1241 425#9 1090#255 529#960 1160#454 617#365 222#977 1018#"
            + "120 859#512 143#1219 421#913 648#879 203#923 621#856 705#931 26#1196 864#1022 969#254 532#38 1131#"
            + "424 415#1110 319#406 1122#594 1168#144 1094#830 270#249 394#878 907#707 352#1005 1131#554 607#284 537#"
            + "1014 652#230 164#336 1194#980 263#1123 473#526 720#1071 315#706 197#484 1076#516 706#680 820#496 228#"
            + "1173 572#495 1119#477 1217#1233 332#613 273#983 500#737 109#102 788#770 878#416 317#142 561#373 937#"
            + "174 252#349 357#121 1149#96 929#370 1041#479 933#498 51#404 1251#113 1060#307 355#1024 395#1213 981#"
            + "195 231#403 253#483 673#919 758#142 586#1028 671#90 186#630 522#754 777#1124 737#354 413#764 613#"
            + "134 391#998 500#931 415#828 710#215 21#196 568#990 1017#608 233#945 986#83 1009#933 55#671 235#1128 362#"
            + "1191 1222#156 518#823 210#108 257#204 1093#837 197#985 989#726 1107#925 1055#232 302#1031 671#243 848#"
            + "600 370#22 457#1086 700#1009 346#159 698#138 889#1192 86#1061 640#812 1134#188 951#1245 555#651 1261#"
            + "1122 920#2 1155#683 942#874 451#22 1012#1215 1151#35 399#356 712#364 694#635 1264#967 173#248 389#"
            + "174 781#136 1076#680 858#918 335#122 715#941 875#750 610#568 670#480 640#806 474#1212 156#843 398#"
            + "948 1#120 814#571 695#595 1229#1080 871#2 1140#259 657#802 708#976 1115#1137 285#386 897#372 42#40 594#"
            + "634 518#1214 738#344 222#195 600#161 132#24 530#626 438#1203 1110#44 871#53 901#977 794#729 1166#"
            + "191 391#58 913#148 309#446 444#919 703#701 269#134 905#310 4#1003 754#885 1149#642 989#1247 284#"
            + "317 1261#134 881#328 635#1103 1062#540 494#458 958#376 799#456 320#779 506#66 1075#354 492#1176 421#"
            + "1217 940#936 657#745 90#1021 137#1016 423#1039 57#666 1142#190 697#364 732#1125 798#1194 391#654 653#"
            + "853 649#245 1080#180 881#573 1084#1011 471#295 948#1060 1070#583 1152#826 1020#752 867#409 194#925 644#"
            + "803 627#288 558#533 491#277 933#753 698#392 1245#672 386#1078 136#453 506#695 26#1195 978#566 593#"
            + "353 1163#5 1235#982 336#139 730#693 174#1242 767#48 234#426 533#445 533#1170 545#1117 161#419 1165#"
            + "258 173#805 420#447 512#1019 741#885 977#1036 62#273 856#443 70#1105 414#679 1006#112 1055#535 588#"
            + "348 881#416 683#223 81#1150 179#438 885#666 1234#39 1261#499 249#827 694#656 35#247 402#1045 500#818 23#"
            + "598 101#411 449#439 757#1116 791#873 1175#699 879#199 301#1098 933#240 193#547 469#925 663#327 833#"
            + "1144 141#402 727#304 373#410 1143#496 200#875 124#465 296#322 1129#943 722#20 904#315 345#946 56#"
            + "415 395#125 1137#926 109#645 355#913 425#741 461#10 443#31 249#1237 472#160 204#900 437#925 958#166 508#"
            + "81 580#427 1103#1108 827#424 894#35 676#590 968#369 726#230 12#336 100#1009 1256#136 394#482 874#"
            + "274 86#888 783#885 240#128 151#47 286#533 1182#407 332#517 1233#843 674#792 1182#1063 134#1170 705#"
            + "1118 678#116 1053#554 354#687 240#937 190#1084 218#237 1254#278 1027#817 1211#1227 1065#586 1256#"
            + "1222 493#188 162#309 39#63 110#503 1038#358 1062#754 592#944 341#1208 981#474 497#412 1254#1126 297#"
            + "958 79#867 668#524 72#864 176#540 924#975 517#664 787#626 1198#464 855#803 18#1158 91#353 760#1153 268#"
            + "446 234#993 550#504 531#1002 59#777 1143#439 775#83 842#352 28#976 825#654 324#17 371#698 146#64 419#"
            + "75 194#635 714#42 831#678 931#159 82#499 165#227 276#462 191#953 1217#141 328#707 779#755 1169#"
            + "1081 888#1257 1198#1152 365#659 424#214 350#1151 1044#1140 1202#959 349#1168 1094#1001 617#634 866#"
            + "242 645#585 804#353 1154#276 369#594 653#735 279#367 1121#403 777#408 1120#323 617#970 770#363 829#"
            + "784 1191#1017 855#217 161#1187 492#585 56#412 429#502 67#297 524#54 629#774 1152#540 528#468 48#"
            + "706 239#466 956#131 188#755 914#989 10#1126 939#972 1259#874 1218#572 1263#1051 139#702 140#156 0#"
            + "992 1217#946 884#1099 646#694 391#1267 815#435 120#1032 1078#1201 1226#45 826#1194 530#429 1033#"
            + "1233 1259#1197 346#229 27#664 1182#1211 953#1186 639#852 801#57 98#695 1210#851 53#776 557#1203 65#"
            + "1253 187#709 430#85 476#178 509#799 1062#4 130#1083 1121#479 1134#640 1192#353 820#384 705#942 541#"
            + "454 394#1161 680#656 599#829 691#119 400#439 631#605 52#518 572#212 503#50 898#658 1134#74 801#694 841#"
            + "309 789#435 495#330 1022#839 853#1227 716#126 899#1000 195#953 699#862 9#281 988#402 601#374 788#758 943#"
            + "1094 298#1099 365#146 758";

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public int one() {
        return Teads.distanceFromCenter(new Scanner(ONE.replace('#', '\n')));
    }

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public int six() {
        return Teads.distanceFromCenter(new Scanner(SIX.replace('#', '\n')));
    }

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public int four() {
        return Teads.distanceFromCenter(new Scanner(FOUR.replace('#', '\n')));
    }

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public Map<Integer, Node> getOneNodes() {
        return Teads.getNodes(new Scanner(ONE.replace('#', '\n')));
    }

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public Map<Integer, Node> getSixNodes() {
        return Teads.getNodes(new Scanner(SIX.replace('#', '\n')));
    }

    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    public Map<Integer, Node> getFourNodes() {
        return Teads.getNodes(new Scanner(FOUR.replace('#', '\n')));
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(".*" + TeadsBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(3)
                .measurementIterations(3)
                .timeUnit(TimeUnit.MILLISECONDS)
                .forks(1)
                .build();

        new Runner(opt).run();
    }
}
